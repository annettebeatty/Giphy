$(document).ready(function()
{
     // Initial array of foods
      var foods = ["popcorn", "candy"];

      var favArray = [];
      var firstTime = true;
      var valid = "abcdefghijklmnopqrstuvwxyz";
      var appendFlag = false;
      var downloadFlag = false;
      var lastDBvalue = "";
      var lastFoodValue = "";
      var foodOffset = 0;

      // displayFoodInfo function re-renders the HTML to display the appropriate content
      function displayFoodInfo() 
      {
        var food = $(this).attr("data-name");
        var queryURL = "";

        // Clear error message
        $("#msg").empty();
        
        console.log("In Displaying the food");
        var dbValue = $('input[name=optradio]:checked').val();

        console.log("Last DB value", lastDBvalue);

        console.log("DB value clicked is ", dbValue);
        console.log("append flag = ", appendFlag);

        // Check if we're pushing the same button again.  If we are, we'll give them the 
        // next 10 GIFs
        if (lastFoodValue == food)
        {   // Same category, so we'll ask Giphy for the next 10 results by giving an offset
            foodOffset += 9;
        }
        else
        {
            // If we're not appending, then clear out the last GIFs/movies
            if (appendFlag == false)
            {
                console.log("append flag is false");
                $("#food-view").empty();
            }

            // Since this is a different category, start from a zero offset
            foodOffset = 0;
        }

        // I don't allow appending different formats.  We'll clear out the last display
        if (lastDBvalue != dbValue)
        {
            $("#food-view").empty();
            foodOffset = 0;
        }

        // Build a query based on what we're searching for - GIFs or OMDB
        switch (dbValue)
        {
            case "giphy":
            {
                // Replace spaces with "+"
                var foodStr = food.replace(/ /g,"+");
                console.log("foodStr = ", foodStr);

                queryURL = "https://api.giphy.com/v1/gifs/search?q=" +
                foodStr + "&offset=" + foodOffset + "&api_key=yCyV2ynWSh8G8J9AU8zCDfxSurChUHeL&limit=10";

                break;
            }

            case "omdb":
            {
                queryURL = "https://www.omdbapi.com/?t=" +
                food + "&y=&plot=short&apikey=trilogy";
                        break;
            }

            default:
            {
                $("#msg").text("DB is not found");
                return;
            }
        }

        // Creating an AJAX call for the specific food button being clicked
        $.ajax({
          url: queryURL,
          method: "GET"
        }).then(function(response) 
        {
          var title;
          var ratings;
          var still;
          var animate;

          console.log(response);

          // OMDB returned no data
          if (response.Response == "False")
          {
            $("#msg").text("No data found");
            return;
          }

          // Set response based on which source we're hitting
          if (dbValue == "giphy")
          {
            var results = response.data;
            var entries = results.length;
          }
          else  
          {
            // It's a movie - they only return one entrie
            var results = response;
            var entries = 1;
          }

          for (var i = 0; i < entries; i++)
          {
            
            // Creating and storing div tag
            var foodDiv = $("<div class='col-md-4 food-container'>");

            switch (dbValue)
            {
                case "giphy":  // Giphy DB
                    // Give instructions
                    $("#msg").text("Click image to toggle animation.  For more GIFs, click button again.");

                    // Set the page title
                    $("#title").html("<h1>Food GIF Search</h1>");

                    // Calling titleCase to clean up the title 
                    title = titleCase(results[i].title);

                    // Remove "GIF" from the title
                    title = title.replace(/Gif/g,'');

                    console.log("new title ", title , "ID", results[i].id);

                    // Set ratings
                    ratings = results[i].rating

                    // Set the images
                    still = results[i].images.fixed_height_still.url; 
                    animate = results[i].images.fixed_height.url;
                    break;
    
                case "omdb":   // OMDB DB
                {
                    title = response.Title;
                    ratings = response.Rated;
                    console.log("Poster", response.Poster);

                    // Set the title
                    $("#title").html("<h1>Food OMBD Search</h1>");

                    // If no poster, then give a default image
                    if (response.Poster == "N/A")
                    {
                        still = "assets/images/film.jpg";
                        animate = "assets/imafes/film.jpg";
                    }
                    else
                    {
                        still = response.Poster;
                        animate = response.Poster;
                    }
                    console.log("OMBD Title", title, " Rating: ", ratings, "Poster ", still);
                    break;
                }
            }



            // Creating an element to have the Title displayed
            var pOne = $("<p>").text(title);

            // Displaying the Title
            foodDiv.append(pOne);

            // Creating an element to have the rating displayed
            var pOne = $("<p>").text("Rating: " + ratings);

            // Displaying the rating
            foodDiv.append(pOne);

            // Creating and storing the image tag
            var foodImage = $("<img>");

            // Add still and moving gif tags.
            foodImage.attr("data-still", still);
            foodImage.attr("data-animate", animate);
            foodImage.attr("data-state", "still");

            // Creating an element to hold the image and initialize to not move
            foodImage.attr("src", still);;

            // Adding attribute and buttons so we can start and stop this puppy
            foodImage.attr("fooddata", i);
            foodImage.addClass("foodgif responsive");
            
            // If this is a movie, let's give them a few more details
            if (dbValue == "omdb")
            {
                foodDiv.append($("<p>").text("Released: " + response.Released));
                console.log("Genre ", response.Genre);
                foodDiv.append($("<p>").text("Type: " + response.Genre));
                foodDiv.removeClass("food-container col-md-4");
                foodDiv.addClass("movie");
            }
            else
            {
                foodDiv.addClass("food-container col-md-4");
                foodDiv.removeClass("movie");
            }

            // Appending the image 
            foodDiv.append(foodImage);

            // Displaying the image
            if ((appendFlag) || lastFoodValue == food) // If the append flag is on or we clicked the same button
                $("#food-view").prepend(foodDiv); 
            else
                $("#food-view").append(foodDiv);
          } // Loop end

          $("#food-view").append("</div>");

          // Save the state of the last time we did this so we know if it was
          // an OMDB or an GIF
          lastDBvalue = dbValue;
          lastFoodValue = food;
        });

      }

      // This function will set the source to a GIF or a still image.  The effect for the user
      // will look like starting or stopping the animation.

      // (NOTE: Pay attention to the unusual syntax here for the click event.
      // Because we are creating click events on "dynamic" content, we can't just use the usual "on" "click" syntax.)
      $(document).on("click", ".foodgif", function() 
      {

        console.log("clicked on the image")



        // Get the number of the button from its data attribute and hold in a variable called state
        var state = $(this).attr("data-state");

        // ***** WORKING HERE *****
        // Check the state.  If download flag is on, we download and don't animate
       // if (downloadFlag)
       // {
       //     var source = $(this).attr("src");
        //    console.log("Source", source)
       //     window.location.href = source;
       // }
       // else
        {
            // If the clicked image's state is still, set the source to the animated GIF
            // Then, reset the image's data-state to animate
            // Else set src to the data-still value and set source accordingly
            if (state === "still") 
            {
            $(this).attr("src", $(this).attr("data-animate"));
            $(this).attr("data-state", "animate");
            } 
            else 
            {
            $(this).attr("src", $(this).attr("data-still"));
            $(this).attr("data-state", "still");
            }
        }
       });

      // This function will render buttons dynamically created by the user based on subjects
      // they want us to search on
      function renderButtons() {
        // Deleting the buttons view prior to adding these new buttons
        // (this is necessary otherwise you will have repeat buttons)
        $("#buttons-view").empty();
        $("#fav-view").empty();

        favArray = JSON.parse(localStorage.getItem("favlist"));

        // Check our favorites array before rendering the buttons
        if (firstTime && Array.isArray(favArray)) 
        {
            // We have favorites.  If there's something there, we'll delete the defaul 
            // buttons we use to prime the user
            if (favArray.length > 0)
                foods = [];

            firstTime = false;
        }

        // Looping through the array of foods
        for (var i = 0; i < foods.length; i++) 
        {
          // Then dynamicaly generating buttons for each food image in the array
          // This code $("<button>") is all jQuery needs to create the beginning and end tag. (<button></button>)
          var a = $("<button>");
          // Adding a class of food-btn to our button
          a.addClass("food-btn");
          // Adding a data-attribute
          a.attr("data-name", foods[i]);
          // Providing the initial button text
          a.text(foods[i]);
          // Adding the button to the buttons-view div
          $("#buttons-view").append(a);
        }

        console.log("fav array ", favArray)

        if (!Array.isArray(favArray)) {
            // Nothing here yet, so initialize the array
            favArray = [];
        }
        else
        {
            // Looping through the favorite array of foods
            for (var i = 0; i < favArray.length; i++) 
            {
                console.log("rendering fav array");
                // Then dynamicaly generating buttons for each food in the array
                // This code $("<button>") is all jQuery needs to create the beginning and end tag. (<button></button>)
                var a = $("<button>");
                // Adding a class of food-btn to our button
                a.addClass("food-btn");
                // Adding a data-attribute
                a.attr("data-name", favArray[i]);
                // Providing the initial button text
                a.text(favArray[i]);
                // Adding the button to the buttons-view div
                $("#fav-view").append(a);
            }
        }
      }

      // This function will add a new button on the page based on the new subject input
      $("#add-food").on("click", function(event) 
      {
        event.preventDefault();

        // This line grabs the input from the textbox
        var food = $("#food-input").val().trim();

        // Keep the input consistent by making everything lower case
        food = food.toLowerCase(food);

        // Check the entry and clean it up
        x = cleanAndcheck(food, 1);

        console.log("return from clean", x);
        console.log("food ", food);
        switch (x)
        {
            case -1:  // bad entry
                return;

            case 0: // Not in either array
            {
                // Adding food from the textbox to our array
                foods.push(food);
                break;
            }
            case 1: 
            {
                // its already there, so no need to re-add it.  Just return to the user
                return;
            }
            case 2: // It's in the favorites array, so we'll return and not add it
            {
                return;
            }
        }

        // Calling renderButtons which handles the processing of our food array
        renderButtons();

      });

      // This function will remove a button from the page
      $("#remove-food").on("click", function(event) 
      {
        event.preventDefault();
        var x;

        $("#msg").empty();

        // This line grabs the input from the textbox
        var food = $("#food-input").val().trim();

        food = food.toLowerCase(food);
        
        // See if this is in the array
        x = foods.indexOf(food);

        if (x == -1)
        {
            // Not in standard, temporary array - look now in favorite array
            favArray = JSON.parse(localStorage.getItem("favlist"));
            x = favArray.indexOf(food);

            if (x == -1)
            {   // Asking to delete an entry that isn't there, so return to the user
                $("#msg").text("Entry is not found");
                return;
            }  
    
            // It's in the favorites array
            favArray.splice(x, 1);
            localStorage.setItem("favlist", JSON.stringify(favArray));
        }
        else
        {   // In standard array
            console.log("want to remove this one ", food, "array element - ", x);

            // Remove from the array
            foods.splice(x, 1);
        }

         // Re-show the buttons
         renderButtons();
        });

        // This will add a button to favorites as long as the entry is valid and 
        // doesn't already exist as a button
        $("#fav-food").on("click", function(event) 
        {
            event.preventDefault();
            var x;

            // This line grabs the input from the textbox
            var food = $("#food-input").val().trim();

            food = food.toLowerCase(food);

            // Check it - clean and check returns index of the array
            x = cleanAndcheck(food, 2);
    
            switch (x)
            {
                case -1:  // bad entry
                    return;
                case 0: // Not in either array
                {
                    break;
                }
                case 1: 
                {
                    // if it's in the foods array need to take it out
                    console.log("Foods ", foods);
                    x = foods.indexOf(food);
                    console.log("Food in food array: ", x);
                    foods.splice(x, 1);
                    console.log("Foods ", foods);
                    break;
                }
                case 2: // if it's in the favorites array, need to return
                {
                    return;
                    // We're going to add it to the fav array, so remove it from the foods array
                }
            }

            // Needs to go into the fav array
            favArray.push(food);
            localStorage.setItem("favlist", JSON.stringify(favArray));

            // Re-show the buttons
            renderButtons();
        });

        // If append is clicked, set the flag so we know if we need to clear the last
        // results or not
       $("#switch-id").on("click", function(event) 
        {
            var clicked = $(this).attr("isItOn");
            console.log("Clicked", clicked);

            if (clicked == "true")
            {
                appendFlag = false;
                $(this).attr("isItOn", "false");
                console.log("change it to false");
            }
            else
            {
                appendFlag = true;
                console.log("change it to true");
                $(this).attr("isItOn", "true");
            }

            console.log("New clicked add more is ", $(this).attr("isItOn"));
        });

        // If download is clicked, set the flag so we know if we need to download
        // on click instead of animate
       $("#download-id").on("click", function(event) 
       {
           var clicked = $(this).attr("isItOn");
           console.log("Dowload Clicked", clicked);

           if (clicked == "true")
           {
               downloadFlag = false;
               $(this).attr("isItOn", "false");
               console.log("change it to false");
           }
           else
           {
               downloadFlag = true;
               $(this).attr("download", true);
               console.log("change it to true");
               $(this).attr("isItOn", "true");
           }

           console.log("New clicked add more is ", $(this).attr("isItOn"));
       });

        // Sets the source where we'll pull the data - either Giphy or OMDB
        $("#db-option").on("click", function(event) 
        {
            var selValue = $('input[name=optradio]:checked').val();

            console.log("clicked is ", selValue);
        });

        // This does 2 things: 
        // 1) It does error checking on user input (Need to input something, no special characters or numbers)
        // 2) It also returns if this item doesn't exist or, if it does, where it exists
        // Returns 1 if its in the foods array
        // Returns 2 if its not in foods array, but in the fav array
        // Returns 0 if its not in either array
        // Returns -1 if it's not valid
        function cleanAndcheck(food, caller)
        {
            console.log("check food ", food);

            $("#msg").empty();

            // Pulling out my spaces so that I can test if they only enter characters
            var testit = food.replace(/\s/g, '')

            // Has to have only characters to be valid
            // Pulled from stack overflow - regular expressions
            // This says if all the character is in the range from a-z
            if (!/^[a-z]+$/.test(testit)) 
            {
                console.log("not valid");
                return -1;
            }

            x = foods.indexOf(food);
            
            // Check if it's in the foods array
            if (x == -1)
            {    // It's not in the foods array

                // Check if it's already in the fav food array
                favArray = JSON.parse(localStorage.getItem("favlist"));

                console.log("favorite array ", favArray)

                if (Array.isArray(favArray))
                {
                    if (favArray.indexOf(food) != -1)
                    {
                        // It's in the favorite array
                        console.log("In the fav array");
                        return 2;
                    }
                }

                // It's not in the fav or foods array
                return 0;
            }
            else // it's in the foods array
            {
                return 1;
            }
        }
    
        // This will capitalize the first letter of every word in a title
        // Pulled this from this site: https://medium.freecodecamp.org/three-ways-to-title-case-a-sentence-in-javascript-676a9175eb27
        function titleCase(str) {
            // Step 1. Lowercase the string
            str = str.toLowerCase();
            // str = "I'm a little tea pot".toLowerCase();
            // str = "i'm a little tea pot";
            
            // Step 2. Split the string into an array of strings
            str = str.split(' ');
            // str = "i'm a little tea pot".split(' ');
            // str = ["i'm", "a", "little", "tea", "pot"];
            
            // Step 3. Create the FOR loop
            for (var i = 0; i < str.length; i++) {
              str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1); 
            }
            
            // Step 4. Return the output
            return str.join(' '); // ["I'm", "A", "Little", "Tea", "Pot"].join(' ') => "I'm A Little Tea Pot"
          }

      // This executes when someone clicks on a GIF.  The effect will be to call
      // displayFoodInfo to redraw the 
      $(document).on("click", ".food-btn", displayFoodInfo);

      // Calling the renderButtons function to display the intial buttons
      renderButtons();
});